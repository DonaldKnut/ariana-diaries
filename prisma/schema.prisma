generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  image       String
  category    String
  content     String   
  userId      String
  userImage   String
  comments    String[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  isAdmin       Boolean   @default(false)
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  title     String
  desc      String
  color     String
  img       String
  slug      String    @unique
  products  Product[]
}

model Product {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  title      String
  desc       String
  img        String?
  price      Decimal
  isFeatured Boolean  @default(false)
  options    Json[]
  category   Category @relation(fields: [catSlug], references: [slug])
  catSlug    String
}

model Order {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  price     Decimal
  products  Json[]
  status    String
  intentId  String?  @unique
  user      User     @relation(fields: [userEmail], references: [email])
  userEmail String
  payment   Payment?
}

model Payment {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  amount     Decimal
  method     String
  status     String
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId    String @unique
}

model Service {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  title       String
  description String
  price       Decimal
  category    String
  img         String?
}

model Event {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  title       String
  description String
  date        DateTime
  location    String
  price       Decimal
  img         String?
}
